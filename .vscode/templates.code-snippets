{
	// Place your registers workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"operation": {
		"scope": "c",
		"prefix": "opfile",
		"body": [
			"#include \"./__includes__.c\"",
			"",
			"/**",
			" * @MNEMONIC ${TM_FILENAME_BASE}",
			" * ",
			" * @FLAGS   :   ${1:ZERO} ${2:NEGATIVE} ${3:HALF-CARRY} ${4:CARRY}",
			" * ",
			" * @OPCODES ",
			" * ",
			" *  XX → X, X",
			"*/",
			"", 
			"void ${TM_FILENAME_BASE}(CPU *cpu, ${5:n *param1, n param2}) {",
			"    // Do stuff...",
			"    $0",
			"}", 
			""
		],
		"description": "New operation template."
	},
	"operationTest": {
		"scope": "c",
		"prefix": "optest",
		"body": [
			"#include <stdio.h>", 
			"#include \"../__includes__.c\"",
			"#include \"../../cpu.c\"",
			"#include \"../../operations/${TM_FILENAME_BASE}.c\"",
			"",
			"/**",
			" * TESTS [❌,✔️,❓]",
			" *",
			" *  ❓ Test 1:",
			" *      Lorem Ipsum ?",
			" * ",
			"*/",
			"",
			"#define TESTS ${1: // Number of Tests}",
			"",
			"int main() {",
			"    CPU cpu;",
			"    initCPU(&cpu);",
			"",
			"    int tests[TESTS];",
			"",
			"    // Test $TM_FILENAME_BASE here... ",
			"    // tests[n] = (some boolean condition)... ",
			"    ",
			"    ",
			"    dumpCPU(&cpu);",
			"    ",
			"    for (int i = 0; i < TESTS; i++) {",
			"        if(tests[i]) {",
			"            printf(\"Passed Test # %d !\\n\", i + 1);",
			"        }",
			"    }",
			"}",
			""
		],
		"description": "Generate operation test file."
	},
	/*
	"test": {
		"scope": "c",
		"prefix": "test",
		"body": [
			" *  ❓ Test ${1:N}:",
			" *      ${2:Lorem Ipsum}",
			" *"
		],
		"description": "Generate single test."
	}*/
}